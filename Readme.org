#+author: conao
#+date: <2018-10-25 Thu>

[[https://github.com/conao3/seml-mode.el][https://img.shields.io/github/tag/conao3/seml-mode.el.svg?style=flat-square]]
[[https://travis-ci.org/conao3/seml-mode.el][https://img.shields.io/travis/conao3/seml-mode.el/master.svg?style=flat-square]]
[[https://github.com/conao3/seml-mode.el][https://img.shields.io/github/license/conao3/seml-mode.el.svg?style=flat-square]]
[[https://github.com/conao3/github-header][https://files.conao3.com/github-header/gif/seml-mode.el.gif]]

- [[#what-is-it][What is it?]]
- [[#settings][Settings]]
- [[#live-refresh-without-save-file][Live-refresh (Without save file)]]
- [[#documents][Documents]]
  - [[#customizable-variables][Customizable Variables]]
  - [[#constants][Constants]]
  - [[#functions][Functions]]
- [[#projects][Projects]]
- [[#welcome-pr][Welcome PR]]
- [[#special-thanks][Special Thanks]]
- [[#author][Author]]

* What is it?
Below 2 files represent the same structure.
With compare 2 files, SEML is *short* and *easy to understand* for Lisp hacker.

#+begin_src html
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="utf-8"/>
      <title>sample page</title>
      <link rel="stylesheet" href="sample1.css"/>
    </head>
    <body>
      <h1>sample</h1>
      <p>
        text sample
      </p>
    </body>
  </html>
#+end_src

#+begin_src seml
  (html ((lang . "en"))
    (head nil
      (meta ((charset . "utf-8")))
      (title nil "sample page")
      (link ((rel . "stylesheet") (href . "sample1.css"))))
    (body nil
      (h1 nil "sample")
      (p nil "text sample")))
#+end_src

#+name: simple-SS
#+caption: simple-seml
[[https://files.conao3.com/github-header/project/seml-mode.el/simple-seml.png]]

Since SEML can use Elisp freely in SEML file, I think that it has *the same power as PHP*.

~seml-mode.el~ provides major mode for editing SEML (S-Expression Markup Language) files for you.

* Settings
Put this package in your ~load-path~, require it.
#+begin_src emacs-lisp
  (add-to-list 'load-path
               (locate-user-emacs-file (format "site-lisp/seml-mode.el" )))
  (require 'seml-mode)
#+end_src

* Auto-refresh (With save file)
* Live-refresh (Without save file)
(Without saving file. Use buffer string instead of read file contents.
As Depends on AppleScript, it works on macOS with Google Chrome only)

~seml-mode.el~ provides the function of live refresh like other modern editors.

If ~seml-mode.el~ read buffer string and eval temporally no error,
send refresh message to Google Chrome.

Sample settings with [[https://github.com/conao3/leaf.el][leaf.el]].
#+begin_src emacs-lisp
  (leaf real-auto-save
    :ensure t
    :custom ((real-auto-save-interval . 0.3))
    :hook (find-file-hook . real-auto-save-mode))

  (leaf seml-mode
    :config (require 'seml-mode)
    :custom ((seml-live-refresh-interval . 0.35)))
#+end_src

Then, with activating target SEML buffer, ~M-x seml-live-refresh-start~ to register
servelet buffer (see [[https://github.com/skeeto/emacs-web-server][simple-httpd]]) and set timer function.

If you stop monitor SEML buffer, ~M-x seml-live-refresh-stop~.

~seml-mode.el~ send refresh message to Google Chrome...
1. When no error read and eval register buffer string,
2. And when the evaled sexp differs from last time,
3. And when open ~seml-mode.el~ live-refresh page (http://localhost:8080/seml-mode/live-refresh).

#+name: complex-SS
#+caption: complex-seml project with live-refresh
[[https://files.conao3.com/github-header/project/seml-mode.el/complex-seml.png]]

* Documents
** Customizable Variables
- seml-mode-hook
- seml-import-dir
- seml-live-refresh-interval
- seml-live-refresh-url-variable
- seml-live-refresh-url-quety
** Constants
- seml-mode-keywords

  Support HTML5 tags.
  #+begin_src emacs-lisp
    (defconst seml-mode-keywords
      '(html
        head title base link meta style
        script noscript
        body section nav article aside hgroup header footer address
        h1 h2 h3 h4 h5 h6
        p hr pre backquote ol ul li
        dl dt dd figure figcaption div main
        a em strong small s cite q dfn addr time code var
        samp kbd sub sup i b mark ruby rt rpbdo span br wbr
        ins del
        img iframe embed object param
        video audio source canvas map area
        table caption colgroup col tbody thead tfoot tr td th
        form fieldset legend label input button select
        datalist optgroup option textarea keygen output progress meter
        details summary command menu

        ;; libxml-parse keywords
        comment top))
  #+end_src

- seml-html-single-tags

  Define single tag (without closing tag)
  #+begin_src emacs-lisp
    (defconst seml-html-single-tags
      '(base link meta img br area param hr col option input wbr))
  #+end_src

** Functions
*** Encode functions (HTML to SEML)
- (seml-encode-html-from-region pointmin pointmax)
- (seml-encode-html-from-string str)
- (seml-encode-html-from-buffer &optional buf)
- (seml-encode-html-from-file filepath)
*** Decode functions (SEML to HTML)
- (seml-decode-seml-from-region start end &optional doctype)
- (seml-decode-seml-from-sexp sexp &optional doctype)
- (seml-decode-seml-from-string str &optional doctype)
- (seml-decode-seml-from-buffer &optional buf doctype)
- (seml-decode-seml-from-file filepath &optional doctype)
*** Buffer replace functions
- (seml-replace-buffer-from-html)
- (seml-replace-buffer-from-seml)
*** Live refresh functions
- (seml-live-refresh-start)
- (seml-live-refresh-stop)
*** Utility functions
- (seml-indent-function indent-point state)
- (seml-to-string sexp)
- (seml-xpath xpath sexp)
  #+begin_src emacs-lisp
    (cort-deftest seml-test:simple-xpath
      (:equal
       (seml-xpath '(html head link)
                   '(html ((lang . "en"))
                          (head nil
                                (meta ((charset . "utf-8")))
                                (title nil
                                       "sample page")
                                (link ((rel . "stylesheet") (href . "sample1.css")))
                                (link ((rel . "stylesheet") (href . "sample2.css"))))
                          (body nil
                                (h1 nil
                                    "sample")
                                (p nil
                                   "sample"
                                   "text sample"))))
       '((link
          ((rel . "stylesheet")
           (href . "sample1.css")))
         (link
          ((rel . "stylesheet")
           (href . "sample2.css"))))))
  #+end_src
- (seml-htmlize majormode codestr)
  #+begin_src emacs-lisp
    (cort-deftest seml-mode:/simple-htmlize
      (:equal (seml-htmlize 'emacs-lisp-mode "(leaf real-auto-save
      :ensure t
      :custom ((real-auto-save-interval . 0.3))
      :commands real-auto-save-mode
      :hook (find-file-hook . real-auto-save-mode))")
              '(pre nil "
    ("
                    (span ((class . "keyword")) "leaf")
                    " real-auto-save
      "
                    (span ((class . "builtin")) ":ensure")
                    " t
      "
                    (span ((class . "builtin")) ":custom")
                    " ((real-auto-save-interval . 0.3))
      "
                    (span ((class . "builtin")) ":commands")
                    " real-auto-save-mode
      "
                    (span ((class . "builtin")) ":hook")
                    " (find-file-hook . real-auto-save-mode))")))
  #+end_src
- (seml-import path)
*** Major mode
- (seml-mode)

* Projects
Packages build on seml-mode.
- [[https://github.com/conao3/leaf-browser.el][leaf-browser.el]] - Web browser frontend of Emacs customize-mode for [[https://github.com/conao3/leaf.el][leaf.el]].

* Welcome PR
We welcome PR!
Travis Cl test ~leaf-test.el~ with all Emacs version 24 or above.

We think that it is difficult to prepare the environment locally, 
so we think that it is good to throw PR and test Travis for the time being!
Feel free throw PR!

* Special Thanks
Advice and comments given by [[http://emacs-jp.github.io/][Emacs-JP]]'s forum member has been a great help
in developing ~seml-mode.el~.

Thank you very much!!

* Author
- Naoya Yamashita (conao3)
